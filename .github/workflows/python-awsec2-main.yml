name: Deploy Python App to AWS EC2 (Build on EC2)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      DOCKER_FILE:
        type: string
        required: true
      IMAGE_NAME:
        type: string
        required: true
      APP_DIR:
        type: string
        required: true
      APP_PORT:
        type: string
        required: true
        default: "8080"

jobs:
  deploy_to_ec2:
    name: Build & Deploy on EC2
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Store EC2 private key
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          echo "${{ secrets.env }}" > .env
          chmod 600 ec2_key.pem

      # Prepare app directory on EC2
      - name: Prepare EC2 directory
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            mkdir -p ${{ inputs.APP_DIR }}
            rm -rf ${{ inputs.APP_DIR }}/*
          EOF

      # Copy source code to EC2
      - name: Copy source to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./* \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ inputs.APP_DIR }}/

      # Copy .env file to EC2
      - name: Copy env to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no .env \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ inputs.APP_DIR }}/.env  

      # Copy deploy script to EC2
      - name: Copy deploy script to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no deploy_on_ec2.sh \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ inputs.APP_DIR }}/

      # Run deploy script on EC2
      - name: Build & Run on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "cd ${{ inputs.APP_DIR }} && chmod +x deploy_on_ec2.sh && ./deploy_on_ec2.sh '${{ inputs.DOCKER_FILE }}' '${{ inputs.IMAGE_NAME }}' '${{ inputs.APP_PORT }}'"

      - name: Deployment complete
        run: echo "✅ Application deployed successfully on AWS EC2!"
              sudo usermod -aG docker $USER
              newgrp docker << EONG
                echo "Docker installed and group updated"
              EONG
            fi
 
            cd ${{ inputs.APP_DIR }}
            docker stop ${{ inputs.IMAGE_NAME }} || true
            docker rm ${{ inputs.IMAGE_NAME }} || true
            docker build -f ${{ inputs.DOCKER_FILE }} -t ${{ inputs.IMAGE_NAME }}:latest .
            docker run -d --name ${{ inputs.IMAGE_NAME }} -p ${{ inputs.APP_PORT }}:${{ inputs.APP_PORT }} ${{ inputs.IMAGE_NAME }}:latest
          EOF

      - name: Deployment complete
        run: echo "✅ Application deployed successfully on AWS EC2!"

name: Deploy Python App to AWS EC2 (Build on EC2)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      DOCKER_FILE:
        type: string
        required: true
      IMAGE_NAME:
        type: string
        required: true
      CONTAINER_NAME:
        type: string
        required: true
      APP_DIR:
        type: string
        required: true
      APP_PORT:
        type: string
        required: true
        default: "8080"

jobs:
  deploy_to_ec2:
    name: Build & Deploy on EC2
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up SSH key and .env
      - name: Set up SSH key and .env
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      # 3Ô∏è‚É£ Prepare app directory on EC2
      - name: Prepare EC2 directory
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            mkdir -p ${{ inputs.APP_DIR }}
            rm -rf ${{ inputs.APP_DIR }}/*
          EOF

      # 4Ô∏è‚É£ Copy source code to EC2
      - name: Copy source to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./* \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ inputs.APP_DIR }}/

      # 7Ô∏è‚É£ Build & run Docker app on EC2
      - name: Build & Run on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e

            if ! command -v docker &> /dev/null
            then
              echo 'üöÄ Installing Docker...'
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ${{ secrets.EC2_USER }}
              echo 'Docker installed and user added to docker group'
            fi

            cd ${{ inputs.APP_DIR }}

            docker kill ${{ inputs.CONTAINER_NAME }} || echo ' ${{ inputs.CONTAINER_NAME }} cannot be killed '
            docker rmi -f \$(docker images -q) || echo 'Failed to remove images'
            docker system prune -a --volumes -f || echo 'Failed to prune system'
            docker build -f ${{ inputs.DOCKER_FILE }} -t ${{ inputs.IMAGE_NAME }}:latest .
            docker run -d --name ${{ inputs.CONTAINER_NAME }} -p ${{ inputs.APP_PORT }}:${{ inputs.APP_PORT }} ${{ inputs.IMAGE_NAME }}:latest
          EOF

      # 8Ô∏è‚É£ Deployment complete
      - name: Deployment complete
        run: echo '‚úÖ Application deployed successfully on AWS EC2!'
